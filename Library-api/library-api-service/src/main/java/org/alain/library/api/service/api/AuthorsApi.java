/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.alain.library.api.service.api;

import io.swagger.annotations.*;
import org.alain.library.api.service.dto.AuthorDto;
import org.alain.library.api.service.dto.AuthorForm;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-10-31T15:23:24.407+01:00")

@Api(value = "authors", description = "the authors API")
public interface AuthorsApi {

    @ApiOperation(value = "Add a new author", nickname = "addAuthor", notes = "", response = AuthorDto.class, tags={ "authors", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Author added successfully to database", response = AuthorDto.class),
        @ApiResponse(code = 400, message = "Parameters are incorrect"),
        @ApiResponse(code = 403, message = "You are not allowed to perform this request") })
    @RequestMapping(value = "/authors",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<AuthorDto> addAuthor(@ApiParam(value = "Author object that needs to be added to the database", required = true) @Valid @RequestBody AuthorForm authorForm);


    @ApiOperation(value = "Delete an autor by id", nickname = "deleteAuthor", notes = "", tags={ "authors", })
    @ApiResponses(value = {
        @ApiResponse(code = 204, message = "Author successfully deleted"),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 403, message = "You are not allowed to perform this request"),
        @ApiResponse(code = 404, message = "Author not found") })
    @RequestMapping(value = "/authors/{id}",
        produces = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteAuthor(@ApiParam(value = "Author id to delete", required = true) @PathVariable("id") Long id);


    @ApiOperation(value = "Get author by Id", nickname = "getAuthor", notes = "", response = AuthorDto.class, tags={ "authors", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Author found", response = AuthorDto.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Author not found") })
    @RequestMapping(value = "/authors/{id}",
        produces = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<AuthorDto> getAuthor(@ApiParam(value = "Id of author to return", required = true) @PathVariable("id") Long id);


    @ApiOperation(value = "Get a list of all authors", nickname = "getAuthors", notes = "Can be filtered by name", response = AuthorDto.class, responseContainer = "List", tags={ "authors", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Authors found", response = AuthorDto.class, responseContainer = "List") })
    @RequestMapping(value = "/authors",
        produces = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<AuthorDto>> getAuthors(@ApiParam(value = "Name of author to return", defaultValue = "") @Valid @RequestParam(value = "name", required = false, defaultValue = "") String name);


    @ApiOperation(value = "Update an author", nickname = "updateAuthor", notes = "", response = AuthorDto.class, tags={ "authors", })
    @ApiResponses(value = {
        @ApiResponse(code = 201, message = "Author updated successfully", response = AuthorDto.class),
        @ApiResponse(code = 400, message = "Parameters are incorrect"),
        @ApiResponse(code = 403, message = "You are not allowed to perform this request"),
        @ApiResponse(code = 404, message = "Author not found") })
    @RequestMapping(value = "/authors/{id}",
        produces = { "application/json" },
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<AuthorDto> updateAuthor(@ApiParam(value = "Author id to update", required = true) @PathVariable("id") Long id, @ApiParam(value = "Author object updated", required = true) @Valid @RequestBody AuthorDto author);

}
