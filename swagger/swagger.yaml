swagger: '2.0'
info:
  version: "1.1.0"
  title: 'Open Library Project'
  description: 'Rest api for Library OpenClassroom Project'

# host: localhost:8080
# basePath: /Library

tags: 
- name: "book"
  description: "Managing books"
- name: "author"
  description: "Managing authors"
- name: "user"
  description: "Managing users"
- name: "loan"
  description: "Managing loan"
- name: "reservation"
  description: "Managing reservations"
  
# schemes:
#   - "http"
#   - "https"

paths:
  /users:
    get:
      tags:
      - "user"
      summary: "Get a list of all users"
      operationId: "getUsers"
      produces:
      - "application/json"
      parameters:
      - name: "email"
        in: "query"
        description: "Email of user to return"
        required: false
        type: "string"
        default: ""
      responses:
        200:
          description: "Users found"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/UserDto'
    post:
      tags:
      - "user"
      summary: "Add a new user"
      operationId: "addUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "userForm"
        description: "User object that needs to be added to the database"
        required: true
        schema:
          type: "object"
          properties:
            email:
              type: "string"
              description: "User email"
            password:
              type: "string"
              description: "User password"
            passwordConfirmation:
              type: "string"
              description: "User password confirmation"
            firstName:
              type: "string"
              description: "User first name"
            lastName:
              type: "string"
              description: "User last name"
      responses:
        201:
          description: "User added successfully to database"
          schema:
            $ref: '#/definitions/UserDto'
        400:
          description: "Parameters are incorrect"
        403:
          description: "You are not allowed to perform this request"
        409:
          description: "This email is already registered in database"
          
  /users/login:
    post:
      tags:
      - "user"
      summary: "Authenticate user"
      operationId: "login"
      consumes:
      - "application/json"
      parameters:
        - in: "body"
          name: "user credentials"
          description: "User email and password"
          required: true
          schema:
            type: "object"
            properties:
              email:
                type: "string"
              password:
                type: "string"
            required:
              - "email"
              - "password"
      responses:
        200: 
          description: "Credentials valid"
        400:
          description: "Invalid credentials supplied"
          
  /users/findByEmail:
    get:
      tags:
      - "user"
      summary: "Get one user by email"
      operationId: "getUserByEmail"
      produces:
      - "application/json"
      parameters:
      - name: "email"
        in: "query"
        description: "Email of user to return"
        required: true
        type: "string"
      - name: "Authorization"
        in: "header"
        description: "User identification"
        required: true
        type: "string"
      responses:
        200:
          description: "User found"
          schema:
            $ref: '#/definitions/UserDto'
        404:
          description: "User not found"
          
  /users/{id}:
    get:
      tags:
      - "user"
      summary: "Get user by Id"
      operationId: "getUser"
      produces:
      - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "Id of user to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "User found"
          schema:
            $ref: '#/definitions/UserDto'
        400:
          description: "Invalid ID supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete a user"
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "User id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "User successfully deleted"
        400:
          description: "Invalid ID supplied"
        403:
          description: "You are not allowed to perform this request"
        404:
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Update a user"
      operationId: "updateUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "User id to update"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "userFormUpdate"
        description: "User object to update"
        required: true
        schema:
          type: "object"
          properties:
            firstName:
              type: "string"
              description: "User first name"
            lastName:
              type: "string"
              description: "User last name"
      - name: "Authorization"
        in: "header"
        description: "User identification"
        required: true
        type: "string"
      security:
        - basicAuth: []
      responses:
        201:
          description: "User updated successfully"
          schema:
            $ref: '#/definitions/UserDto'
        400:
          description: "Parameters are incorrect"
        403:
          description: "You are not allowed to perform this request"
        404:
          description: "User not found"

  /books:
    get:
      tags:
      - "book"
      summary: "Get a list of all books"
      description: "Can be filtered by title"
      operationId: "getBooks"
      produces:
      - "application/json"
      parameters:
        - in: "query"
          name: "title"
          description: "Title of book to return"
          type: "string"
          required: false
          default: ""
        - in: "query"
          name: "author"
          description: "author of book to return"
          type: "string"
          required: false
          default: ""
      responses:
        200:
          description: "Books found"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/BookDto'
    post:
      tags:
      - "book"
      summary: "Add a new book"
      description: "Author should be added in the databse first"
      operationId: "addBook"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "bookForm"
        description: "Book object that needs to be added to the database"
        required: true
        schema:
          type: "object"
          properties:
            title:
              type: "string"
              description: "Book title"
            authors:
              type: "array"
              minItems: 1
              items:
                type: "object"
                properties:
                  firstName:
                    type: "string"
                    description: "Author first name"
                  lastName:
                    type: "string"
                    description: "Author last name"
      responses:
        201:
          description: "Book added successfully to database"
          schema:
            $ref: '#/definitions/BookDto'
        400:
          description: "Parameters are incorrect"
        403:
          description: "You are not allowed to perform this request"
          
  /books/{id}:
    get:
      tags:
      - "book"
      summary: "Get book by Id"
      operationId: "getBook"
      produces:
      - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "Id of book to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Book found"
          schema:
            $ref: '#/definitions/BookDto'
        400:
          description: "Invalid ID supplied"
        404:
          description: "Book not found"
    delete:
      tags:
      - "book"
      summary: "Delete a book by id"
      operationId: "deleteBook"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Book id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "Book successfully deleted"
        400:
          description: "Invalid ID supplied"
        403:
          description: "You are not allowed to perform this request"
        404:
          description: "Book not found"
    put:
      tags:
      - "book"
      summary: "Update a book"
      description: ""
      operationId: "updateBook"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Book id to update"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "book"
        description: "Book object updated"
        required: true
        schema:
          $ref: '#/definitions/BookDto'
      responses:
        201:
          description: "Book updated successfully"
          schema:
            $ref: '#/definitions/BookDto'
        400:
          description: "Parameters are incorrect"
        403:
          description: "You are not allowed to perform this request"
        404:
          description: "Book not found"

  /books/{id}/copies:
    get:
      tags:
      - "book"
      summary: "Get a list of all book's copies"
      operationId: "getCopies"
      produces:
      - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "Id of book to find copies from"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Book's copies found"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/BookCopyDto'
        400:
          description: "Invalid Id Supplied"
        404:
          description: "Book not found"
    post:
      tags:
      - "book"
      summary: "Add a new book copy"
      operationId: "addBookCopy"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Id of book to find copies from"
        required: true
        type: "integer"
        format: "int64"
      - name: "copyForm"
        in: "body"
        description: "Book copy object that needs to be added to the database"
        required: true
        schema:
          type: "object"
          properties:
            editor:
              type: "string"
              description: "editor of the copy"
            barcode:
              type: "string"
              description: "barcode of the copy"
      responses:
        201:
          description: "Book added successfully to database"
          schema:
            $ref:  '#/definitions/BookCopyDto'
        400:
          description: "Parameters are incorrect"
        403:
          description: "You are not allowed to perform this request"
          
  /books/{bookId}/copies/{copyId}:
    get:
      tags:
      - "book"
      summary: "Get bookcopy by Id"
      operationId: "getCopy"
      produces:
      - "application/json"
      parameters:
        - name: "bookId"
          in: "path"
          description: "Book id concerned by the copy"
          required: true
          type: "integer"
          format: "int64"
        - name: "copyId"
          in: "path"
          description: "BookCopy id to get"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Book found"
          schema:
            $ref: '#/definitions/BookCopyDto'
        400:
          description: "Invalid BookID supplied"
        404:
          description: "Book not found"
    delete:
      tags:
      - "book"
      summary: "Delete a book copy by id"
      operationId: "deleteBookCopy"
      produces:
      - "application/json"
      parameters:
      - name: "bookId"
        in: "path"
        description: "Book id to delete a copy from"
        required: true
        type: "integer"
        format: "int64"
      - name: "copyId"
        in: "path"
        description: "BookCopy id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "Book copy successfully deleted"
        400:
          description: "Invalid ID supplied"
        403:
          description: "You are not allowed to perform this request"
        404:
          description: "Book copy not found"
    put:
      tags:
      - "book"
      summary: "Update a book copy"
      operationId: "updateBookCopy"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "bookId"
        in: "path"
        description: "Book id to update copy from"
        required: true
        type: "integer"
        format: "int64"
      - name: "copyId"
        in: "path"
        description: "BookCopy id to update"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "copy"
        description: "Book copy object updated"
        required: true
        schema:
          $ref:  '#/definitions/BookCopyDto'
      responses:
        201:
          description: "Book Copy updated successfully"
          schema:
            $ref:  '#/definitions/BookCopyDto'
        400:
          description: "Parameters are incorrect"
        403:
          description: "You are not allowed to perform this request"
        404:
          description: "Book copy not found"
    
  /authors:
    get:
      tags:
      - "author"
      summary: "Get a list of all authors"
      description: "Can be filtered by name"
      operationId: "getAuthors"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "query"
        description: "Name of author to return"
        type: "string"
        required: false
        default: ""
      responses:
        200:
          description: "Authors found"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/AuthorDto'
    post:
      tags:
      - "author"
      summary: "Add a new author"
      operationId: "addAuthor"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "authorForm"
        description: "Author object that needs to be added to the database"
        required: true
        schema:
          type: "object"
          properties:
            firstName:
              type: "string"
              description: "Author first name"
            lastName:
              type: "string"
              description: "Author last name"
              default: ""
      responses:
        201:
          description: "Author added successfully to database"
          schema:
            $ref: '#/definitions/AuthorDto'
        400:
          description: "Parameters are incorrect"
        403:
          description: "You are not allowed to perform this request"
          
  /authors/{id}:
    get:
      tags:
      - "author"
      summary: "Get author by Id"
      operationId: "getAuthor"
      produces:
      - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "Id of author to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Author found"
          schema:
            $ref: '#/definitions/AuthorDto'
        400:
          description: "Invalid ID supplied"
        404:
          description: "Author not found"
    delete:
      tags:
      - "author"
      summary: "Delete an autor by id"
      operationId: "deleteAuthor"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Author id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "Author successfully deleted"
        400:
          description: "Invalid ID supplied"
        403:
          description: "You are not allowed to perform this request"
        404:
          description: "Author not found"
    put:
      tags:
      - "author"
      summary: "Update an author"
      operationId: "updateAuthor"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Author id to update"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "author"
        description: "Author object updated"
        required: true
        schema:
          $ref: '#/definitions/AuthorDto'
      responses:
        201:
          description: "Author updated successfully"
          schema:
            $ref: '#/definitions/AuthorDto'
        400:
          description: "Parameters are incorrect"
        403:
          description: "You are not allowed to perform this request"
        404:
          description: "Author not found"

  /loans:
    get:
      tags:
      - "loan"
      summary: "Get a list of all loans"
      operationId: "getLoans"
      produces:
      - "application/json"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values as filter in research"
        required: false
        type: "string"
        enum:
        - "loaned"
        - "returned"
        - "prolonged"
        - "late"
      - name: "user"
        in: "query"
        description: "User id as filter in research"
        required: false
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Loans found"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/LoanDto'
    post:
      tags:
      - "loan"
      summary: "Add a new loan"
      operationId: "addLoan"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "loanForm"
        description: "Loan that needs to be added to the database"
        required: true
        schema:
          type: "object"
          properties:
            copyId:
              type: "integer"
              format: "int64"
            userId :
              type: "integer"
              format: "int64"
      responses:
        201:
          description: "Loan added successfully to database"
          schema:
            $ref: '#/definitions/LoanDto'
        400:
          description: "Parameters are incorrect"
        403:
          description: "You are not allowed to perform this request"

  /loans/findLate:
    get:
      tags:
      - "loan"
      summary: "check and get loan list that are late"
      description: "trigger a checkup for all loan's and add late status to expired one's"
      operationId: "checkAndGetLateLoans"
      produces:
      - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "User identification"
          required: true
          type: "string"
      responses:
        200:
          description: "Loan found"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/LoanDto'

  /loans/{id}:
    get:
      tags:
      - "loan"
      summary: "Get loan by Id"
      operationId: "getLoan"
      produces:
      - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "Id of loan to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Loan found"
          schema:
            $ref: '#/definitions/LoanDto'
        400:
          description: "Invalid ID supplied"
        404:
          description: "Loan not found"
    put:
      tags:
      - "loan"
      summary: "Update a loan by adding a status to it"
      operationId: "updateLoan"
      produces:
      - "application/json"
      consumes:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "Id of loan to update"
          required: true
          type: "integer"
          format: "int64"
        - name: "status"
          in: "body"
          description: "Status values to add to loan history"
          required: true
          schema:
            type: "string"
            enum:
              - "loaned"
              - "returned"
              - "prolonged"
              - "late"
      responses:
        200:
          description: "Loan updated"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Loan not found"

  /loans/{id}/history:
    get:
      tags:
      - "loan"
      summary: "Get all loan's history"
      operationId: "getLoanHistory"
      produces:
      - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "Id of loan"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Loan found"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/LoanStatusDto'
        400:
          description: "Invalid ID supplied"
        404:
          description: "Loan not found"

  /loans/{id}/extension:
    put:
      tags:
      - "loan"
      summary: "Extend an existing loan"
      operationId: "extendLoan"
      produces:
      - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "Id of loan"
          required: true
          type: "integer"
          format: "int64"
        - name: "Authorization"
          in: "header"
          description: "User identification"
          required: true
          type: "string"
      responses:
        200:
          description: "Loan extended"
        400:
          description: "Invalid ID supplied"
        403:
          description: "Loan can't be extended"
        404:
          description: "Loan not found"

  /reservations:
    get:
      tags:
      - "reservation"
      summary: "Get a list of all reservations"
      operationId: "getReservations"
      produces:
      - "application/json"
      parameters:
      - name: "currentStatus"
        in: "query"
        description: "Status values as filter in research"
        required: false
        type: "string"
        enum:
        - "pending"
        - "reserved"
        - "terminated"
        - "canceled"
      - name: "user"
        in: "query"
        description: "User id as filter in research"
        required: false
        type: "integer"
        format: "int64"
      - name: "book"
        in: "query"
        description: "Book id as filter in research"
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Reservations found"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/ReservationDto'
    post:
      tags:
      - "reservation"
      summary: "Add a new reservation"
      operationId: "addReservation"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        description: "User identification"
        required: true
        type: "string"
      - name: "reservationForm"
        in: "body"
        description: "reservation to add to database"
        required: true
        schema:
          type: "object"
          properties:
            bookId:
              type: "integer"
              format: "int64"
            userId :
              type: "integer"
              format: "int64"
      responses:
        201:
          description: "Reservation added successfully to database"
          schema:
            $ref: '#/definitions/ReservationDto'
        403:
          description: "You are not allowed to perform this request"
  /reservations/{id}:
    get:
      tags:
      - "reservation"
      summary: "Get reservation by Id"
      operationId: "getReservation"
      produces:
      - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "Id of reservation to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Reservation found"
          schema:
            $ref: '#/definitions/ReservationDto'
    put:
      tags:
      - "reservation"
      summary: "Update a reservation by adding a status to it"
      operationId: "updateReservation"
      produces:
      - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "User identification"
          required: true
          type: "string"
        - name: "id"
          in: "path"
          description: "Id of reservation to update"
          required: true
          type: "integer"
          format: "int64"
        - name: "status"
          in: "query"
          description: "Status value to add"
          required: true
          type: "string"
          enum:
            - "pending"
            - "reserved"
            - "terminated"
            - "canceled"
      responses:
        200:
          description: "Loan updated"
  /reservations/expired:
    get:
      tags:
      - "reservation"
      summary: "check and get reservation list that are expired"
      description: "trigger a checkup for all reservation's, return the list and cancel the expired one's"
      operationId: "checkAndGetExpiredReservation"
      produces:
      - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "User identification"
          required: true
          type: "string"
      responses:
        200:
          description: "Loan found"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/ReservationDto'
              
definitions:

  ReservationDto:
    type: object
    properties:
      id:
        type: integer
        format: int64
        description: Reservation Id
      userId:
        type: integer
        format: int64
        description: User Id
      userEmail:
        type: string
        description: User email
      bookId:
        type: integer
        format: int64
        description: Book Id
      bookTitle:
        type: string
        description: Book title
      currentStatus:
        type: string
        description: Active Status for reservation
      currentStatusData:
        type: string
      statuses:
        type: array
        description: History of statuses
        items:
          $ref: '#/definitions/ReservationStatusDto'

  ReservationStatusDto:
    type: object
    properties:
      id:
        type: integer
        format: int64
        description: Reservation Id
      status:
        type:  string
        description: status designation
      date:
        type: string
        description: date of the event

  UserDto:
    type: object
    properties:
      id:
        type: integer
        format: int64
        description: User Id
      email:
        type: string
        description: User email
      password:
        type: string
        description: User password
      firstName:
        type: string
        description: User first name
      lastName:
        type: string
        description: User last name
      roles:
        type: string
        description: User roles list
      loans:
        type: array
        items:
          $ref: '#/definitions/LoanDto'
      reservations:
        type: array
        items:
          $ref: '#/definitions/ReservationDto'

  BookDto:
    type: object
    properties:
      id:
        type: integer
        format: int64
        description: Book Id
      isbn:
        type: string
        description: Book Isbn
      title:
        type: string
        description: Book title
      authors:
        type: array
        items:
          $ref: '#/definitions/AuthorDto'
      copiesAvailable:
        type: integer
        format: int64
        description: Number of copies available for loan
      reservationListFull:
        type: boolean
      reservations:
        type: array
        items:
          $ref: '#/definitions/ReservationDto'
  
  AuthorDto:
    type: object
    properties:
      id:
        type: integer
        format: int64
        description: Author Id
      firstName:
        type: string
        description: Author first name
      lastName:
        type: string
        description: Author last name
      books:
        type: array
        items:
          type: string
          description: Book written by author

  BookCopyDto:
    type: object
    properties:
      id:
        type: integer
        format: int64
        description: BookCopy Id
      barcode:
        type: string
        description: BookCopy barCode
      editor:
        type: string
        description: Editor
      available:
        type: boolean
      book:
        $ref: '#/definitions/BookDto'
          
  LoanDto:
    type: object
    properties:
      id:
        type: integer
        format: int64
        description: Loan Id
      userId:
        type: integer
        format: int64
        description: User Id
      userEmail:
        type: string
        description: User email
      startDate:
        type: string
        description: date of the loaning recording
      endDate:
        type: string
        description: date of the loaning end
      currentStatus:
        type: string
        description: name of the current status
      currentStatusDate:
        type: string
        description: date of the current status
      bookCopy:
        $ref: "#/definitions/BookCopyDto"

  LoanStatusDto:
    type: object
    properties:
      id:
        type: integer
        format: int64
        description: Loan Id
      status:
        type:  string
        description: status designation
      date:
        type: string
        description: date of the event
        
securityDefinitions:
  basicAuth:
    type: basic
        
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /al26/Library/1.0.0
schemes:
 - https
 - http